import 'dart:math';

class BusinessAIAnalyticsService {
  // Mock business data for analysis
  static final Map<String, dynamic> _businessData = {
    'products': [
      {
        'id': '1',
        'name': 'iPhone 15 Pro Max',
        'category': 'Teknoloji',
        'price': 65000.0,
        'stock': 15,
        'weeklySales': 8,
        'profit': 5200.0,
        'rating': 4.9,
        'reviews': [
          {'user': 'Ahmet Y.', 'rating': 5.0, 'comment': 'Harika √ºr√ºn!'},
          {'user': 'Mehmet K.', 'rating': 5.0, 'comment': '√áok memnun'},
        ],
      },
      {
        'id': '2',
        'name': 'Samsung Galaxy S24',
        'category': 'Teknoloji',
        'price': 55000.0,
        'stock': 8,
        'weeklySales': 12,
        'profit': 6600.0,
        'rating': 4.8,
        'reviews': [
          {'user': 'Ali √á.', 'rating': 4.5, 'comment': 'ƒ∞yi telefon'},
          {'user': 'Fatma √ñ.', 'rating': 5.0, 'comment': 'M√ºkemmel'},
        ],
      },
      {
        'id': '3',
        'name': 'MacBook Pro M3',
        'category': 'Teknoloji',
        'price': 85000.0,
        'stock': 5,
        'weeklySales': 3,
        'profit': 2550.0,
        'rating': 4.9,
        'reviews': [
          {'user': '√ñmer K.', 'rating': 5.0, 'comment': 'ƒ∞nanƒ±lmaz performans!'},
          {'user': 'Zeynep A.', 'rating': 4.8, 'comment': 'Pil √∂mr√º √ßok iyi'},
        ],
      },
      {
        'id': '4',
        'name': 'AirPods Pro 2',
        'category': 'Teknoloji',
        'price': 8500.0,
        'stock': 25,
        'weeklySales': 20,
        'profit': 1700.0,
        'rating': 4.6,
        'reviews': [
          {'user': 'Selin K.', 'rating': 4.5, 'comment': 'Ses kalitesi harika'},
          {'user': 'Kemal √ñ.', 'rating': 4.8, 'comment': 'G√ºr√ºlt√º engelleme √ßok iyi'},
        ],
      },
      {
        'id': '5',
        'name': 'iPad Pro 12.9',
        'category': 'Teknoloji',
        'price': 45000.0,
        'stock': 12,
        'weeklySales': 6,
        'profit': 2700.0,
        'rating': 4.8,
        'reviews': [
          {'user': 'Deniz Y.', 'rating': 5.0, 'comment': '√áizim i√ßin m√ºkemmel'},
          {'user': 'Ece K.', 'rating': 4.7, 'comment': '√áok kaliteli ekran'},
        ],
      },
      {
        'id': '6',
        'name': 'Dell XPS 15',
        'category': 'Teknoloji',
        'price': 72000.0,
        'stock': 3,
        'weeklySales': 1,
        'profit': 720.0,
        'rating': 4.7,
        'reviews': [
          {'user': 'Mert A.', 'rating': 4.0, 'comment': 'ƒ∞yi ama biraz aƒüƒ±r'},
          {'user': 'Can Y.', 'rating': 4.5, 'comment': 'Gaming performansƒ± m√ºkemmel'},
        ],
      },
    ],
    'weeklyStats': {
      'totalSales': 43,
      'totalRevenue': 18470.0,
      'totalProfit': 18470.0,
      'averageRating': 4.8,
      'customerSatisfaction': 92,
      'topPerformingProduct': 'Samsung Galaxy S24',
      'lowestPerformingProduct': 'Dell XPS 15',
    },
    'customerReviews': [
      {'user': 'Ahmet Y.', 'rating': 5.0, 'comment': 'Harika hizmet, √ßok memnun kaldƒ±m!', 'date': '2024-01-15'},
      {'user': 'Mehmet K.', 'rating': 5.0, 'comment': '√úr√ºnler kaliteli, teslimat hƒ±zlƒ±', 'date': '2024-01-14'},
      {'user': 'Ali √á.', 'rating': 4.5, 'comment': 'ƒ∞yi maƒüaza, tavsiye ederim', 'date': '2024-01-13'},
      {'user': 'Fatma √ñ.', 'rating': 4.0, 'comment': 'Fiyatlar biraz y√ºksek ama kaliteli', 'date': '2024-01-12'},
      {'user': '√ñmer K.', 'rating': 5.0, 'comment': 'M√ºkemmel deneyim!', 'date': '2024-01-11'},
    ],
  };

  // Get analytics based on user query
  static List<Map<String, dynamic>> getAnalytics(String userInput) {
    final lowerInput = userInput.toLowerCase();
    final analytics = <Map<String, dynamic>>[];

    // Sales analysis
    if (_containsAny(lowerInput, ['satƒ±≈ü', 'satƒ±≈ülar', 'sales', 'hangi √ºr√ºn'])) {
      analytics.addAll(_getSalesAnalytics());
    }

    // Stock analysis
    if (_containsAny(lowerInput, ['stok', 'inventory', '√ºr√ºn', 'stok durumu'])) {
      analytics.addAll(_getStockAnalytics());
    }

    // Review analysis
    if (_containsAny(lowerInput, ['yorum', 'review', 'm√º≈üteri', 'deƒüerlendirme'])) {
      analytics.addAll(_getReviewAnalytics());
    }

    // Profit analysis
    if (_containsAny(lowerInput, ['kar', 'profit', 'gelir', 'kazan√ß'])) {
      analytics.addAll(_getProfitAnalytics());
    }

    // Weekly report
    if (_containsAny(lowerInput, ['haftalƒ±k', 'weekly', 'rapor', '√∂zet'])) {
      analytics.addAll(_getWeeklyReport());
    }

    // General recommendations
    if (_containsAny(lowerInput, ['√∂neri', 'tavsiye', 'suggestion', 'ne yapmalƒ±'])) {
      analytics.addAll(_getGeneralRecommendations());
    }

    // If no specific query, return weekly summary
    if (analytics.isEmpty) {
      analytics.addAll(_getWeeklySummary());
    }

    return analytics;
  }

  static List<Map<String, dynamic>> _getSalesAnalytics() {
    final products = _businessData['products'] as List<dynamic>;
    final topProduct = products.reduce((a, b) => a['weeklySales'] > b['weeklySales'] ? a : b);
    final lowProduct = products.reduce((a, b) => a['weeklySales'] < b['weeklySales'] ? a : b);
    
    // Sort products by sales for detailed analysis
    final sortedProducts = List<Map<String, dynamic>>.from(products);
    sortedProducts.sort((a, b) => (b['weeklySales'] as int).compareTo(a['weeklySales'] as int));

    return [
      {
        'type': 'sales',
        'title': 'üî• En √áok Satan √úr√ºn',
        'description': '${topProduct['name']} - Bu hafta ${topProduct['weeklySales']} adet satƒ±ldƒ±!\nToplam gelir: ‚Ç∫${(topProduct['price'] * topProduct['weeklySales']).toStringAsFixed(0)}\nStok durumu: ${topProduct['stock']} adet',
        'recommendation': 'Bu √ºr√ºn√ºn stok seviyesini artƒ±rƒ±n ve benzer √ºr√ºnler ekleyin. M√º≈üteri talebi y√ºksek!',
        'isTopSeller': true,
      },
      {
        'type': 'warning',
        'title': '‚ö†Ô∏è En Az Satan √úr√ºn',
        'description': '${lowProduct['name']} - Bu hafta sadece ${lowProduct['weeklySales']} adet satƒ±ldƒ±\nStok: ${lowProduct['stock']} adet\nFiyat: ‚Ç∫${lowProduct['price']}',
        'recommendation': 'Bu √ºr√ºn√º indirimle satmayƒ± veya katalogdan √ßƒ±karmayƒ± d√º≈ü√ºn√ºn. Satƒ±≈ü performansƒ± d√º≈ü√ºk.',
        'isLowSeller': true,
      },
      {
        'type': 'sales',
        'title': 'üìä Haftalƒ±k Satƒ±≈ü √ñzeti',
        'description': 'Toplam ${_businessData['weeklyStats']['totalSales']} √ºr√ºn satƒ±ldƒ±\nOrtalama g√ºnl√ºk satƒ±≈ü: ${(_businessData['weeklyStats']['totalSales'] / 7).toStringAsFixed(1)} adet\nToplam gelir: ‚Ç∫${_businessData['weeklyStats']['totalRevenue'].toStringAsFixed(0)}',
        'recommendation': 'Satƒ±≈ü performansƒ±nƒ±z iyi, hedef m√º≈üteri kitlenizi geni≈ületmeyi d√º≈ü√ºn√ºn.',
        'showChart': true,
      },
      {
        'type': 'sales',
        'title': 'üèÜ Satƒ±≈ü Sƒ±ralamasƒ±',
        'description': '1. ${sortedProducts[0]['name']} (${sortedProducts[0]['weeklySales']} adet)\n2. ${sortedProducts[1]['name']} (${sortedProducts[1]['weeklySales']} adet)\n3. ${sortedProducts[2]['name']} (${sortedProducts[2]['weeklySales']} adet)',
        'recommendation': 'En √ßok satan 3 √ºr√ºn√ºn√ºz√ºn stok seviyelerini kontrol edin.',
      },
    ];
  }

  static List<Map<String, dynamic>> _getStockAnalytics() {
    final products = _businessData['products'] as List<dynamic>;
    final lowStockProducts = products.where((p) => p['stock'] < 10).toList();
    final outOfStockProducts = products.where((p) => p['stock'] == 0).toList();
    final criticalStockProducts = products.where((p) => p['stock'] < 5).toList();

    final analytics = <Map<String, dynamic>>[];

    if (criticalStockProducts.isNotEmpty) {
      analytics.add({
        'type': 'warning',
        'title': 'üö® KRƒ∞Tƒ∞K STOK UYARISI',
        'description': '${criticalStockProducts.length} √ºr√ºn√ºn stok seviyesi kritik (5 adetten az):\n${criticalStockProducts.map((p) => '‚Ä¢ ${p['name']} (${p['stock']} adet)').join('\n')}',
        'recommendation': 'Bu √ºr√ºnlerin stok seviyesini ACƒ∞LEN artƒ±rƒ±n!',
        'isCritical': true,
      });
    }

    if (outOfStockProducts.isNotEmpty) {
      analytics.add({
        'type': 'warning',
        'title': '‚ùå STOK T√úKENDƒ∞',
        'description': '${outOfStockProducts.length} √ºr√ºn√ºn stoku t√ºkendi:\n${outOfStockProducts.map((p) => '‚Ä¢ ${p['name']}').join('\n')}',
        'recommendation': 'Bu √ºr√ºnleri hemen sipari≈ü edin!',
        'isOutOfStock': true,
      });
    }

    if (lowStockProducts.isNotEmpty) {
      analytics.add({
        'type': 'warning',
        'title': '‚ö†Ô∏è D√º≈ü√ºk Stok Uyarƒ±sƒ±',
        'description': '${lowStockProducts.length} √ºr√ºn√ºn stok seviyesi d√º≈ü√ºk (10 adetten az):\n${lowStockProducts.map((p) => '‚Ä¢ ${p['name']} (${p['stock']} adet)').join('\n')}',
        'recommendation': 'Bu √ºr√ºnlerin stok seviyesini artƒ±rƒ±n.',
      });
    }

    // Top sellers with low stock
    final topSellersWithLowStock = products.where((p) => p['weeklySales'] > 5 && p['stock'] < 10).toList();
    if (topSellersWithLowStock.isNotEmpty) {
      analytics.add({
        'type': 'warning',
        'title': 'üî• √áok Satan + D√º≈ü√ºk Stok',
        'description': 'Bu √ºr√ºnler √ßok satƒ±yor ama stoklarƒ± d√º≈ü√ºk:\n${topSellersWithLowStock.map((p) => '‚Ä¢ ${p['name']} (${p['weeklySales']} satƒ±≈ü, ${p['stock']} stok)').join('\n')}',
        'recommendation': 'Bu √ºr√ºnlerin stok seviyesini ACƒ∞LEN artƒ±rƒ±n!',
        'isTopSellerLowStock': true,
      });
    }

    analytics.add({
      'type': 'stock',
      'title': 'üì¶ Genel Stok Durumu',
      'description': 'Toplam ${products.length} √ºr√ºn√ºn√ºz var\nOrtalama stok seviyesi: ${(products.fold(0.0, (sum, p) => sum + (p['stock'] as int)) / products.length).toStringAsFixed(0)} adet\nD√º≈ü√ºk stoklu √ºr√ºn: ${lowStockProducts.length} adet',
      'recommendation': 'Stok seviyelerinizi d√ºzenli olarak kontrol edin.',
    });

    return analytics;
  }

  static List<Map<String, dynamic>> _getReviewAnalytics() {
    final reviews = _businessData['customerReviews'] as List<dynamic>;
    final averageRating = reviews.fold(0.0, (sum, r) => sum + r['rating']) / reviews.length;
    final positiveReviews = reviews.where((r) => r['rating'] >= 4).length;
    final negativeReviews = reviews.where((r) => r['rating'] < 3).length;

    return [
      {
        'type': 'reviews',
        'title': 'M√º≈üteri Memnuniyeti',
        'description': 'Ortalama puan: ${averageRating.toStringAsFixed(1)}/5.0. ${positiveReviews} olumlu, ${negativeReviews} olumsuz yorum',
        'recommendation': 'M√º≈üteri memnuniyetiniz y√ºksek, bu durumu koruyun.',
      },
      {
        'type': 'reviews',
        'title': 'Son M√º≈üteri Yorumlarƒ±',
        'description': 'En son yorumlar: ${reviews.take(3).map((r) => '${r['user']}: ${r['comment']}').join(', ')}',
        'recommendation': 'M√º≈üteri geri bildirimlerini d√ºzenli olarak takip edin.',
      },
    ];
  }

  static List<Map<String, dynamic>> _getProfitAnalytics() {
    final weeklyStats = _businessData['weeklyStats'];
    final products = _businessData['products'] as List<dynamic>;
    final totalProfit = products.fold(0.0, (sum, p) => sum + p['profit']);
    final profitMargin = (totalProfit / weeklyStats['totalRevenue']) * 100;

    return [
      {
        'type': 'profit',
        'title': 'Haftalƒ±k Kar Durumu',
        'description': 'Toplam gelir: ‚Ç∫${weeklyStats['totalRevenue'].toStringAsFixed(0)}, Kar marjƒ±: %${profitMargin.toStringAsFixed(1)}',
        'recommendation': 'Kar marjƒ±nƒ±z iyi, maliyetleri kontrol altƒ±nda tutun.',
      },
      {
        'type': 'profit',
        'title': 'En Karlƒ± √úr√ºn',
        'description': 'Samsung Galaxy S24 - Haftalƒ±k kar: ‚Ç∫${products.firstWhere((p) => p['name'] == 'Samsung Galaxy S24')['profit']}',
        'recommendation': 'Bu √ºr√ºn√ºn satƒ±≈üƒ±nƒ± artƒ±rmaya odaklanƒ±n.',
      },
    ];
  }

  static List<Map<String, dynamic>> _getWeeklyReport() {
    final weeklyStats = _businessData['weeklyStats'];
    final products = _businessData['products'] as List<dynamic>;

    return [
      {
        'type': 'sales',
        'title': 'Haftalƒ±k Satƒ±≈ü Raporu',
        'description': 'Toplam ${weeklyStats['totalSales']} √ºr√ºn satƒ±ldƒ±. Gelir: ‚Ç∫${weeklyStats['totalRevenue'].toStringAsFixed(0)}',
        'recommendation': 'Satƒ±≈ü performansƒ±nƒ±z ge√ßen haftaya g√∂re %15 artƒ±≈ü g√∂steriyor.',
      },
      {
        'type': 'reviews',
        'title': 'M√º≈üteri Memnuniyeti',
        'description': 'Ortalama puan: ${weeklyStats['averageRating']}/5.0. Memnuniyet oranƒ±: %${weeklyStats['customerSatisfaction']}',
        'recommendation': 'M√º≈üteri memnuniyetiniz √ßok y√ºksek, bu durumu koruyun.',
      },
      {
        'type': 'profit',
        'title': 'Kar Analizi',
        'description': 'Haftalƒ±k kar: ‚Ç∫${weeklyStats['totalProfit'].toStringAsFixed(0)}. Kar marjƒ±: %${((weeklyStats['totalProfit'] / weeklyStats['totalRevenue']) * 100).toStringAsFixed(1)}',
        'recommendation': 'Kar performansƒ±nƒ±z hedeflerin √ºzerinde.',
      },
    ];
  }

  static List<Map<String, dynamic>> _getGeneralRecommendations() {
    final products = _businessData['products'] as List<dynamic>;
    final lowStockProducts = products.where((p) => p['stock'] < 10).toList();
    final lowSalesProducts = products.where((p) => p['weeklySales'] < 5).toList();

    final recommendations = <Map<String, dynamic>>[];

    if (lowStockProducts.isNotEmpty) {
      recommendations.add({
        'type': 'warning',
        'title': 'Stok √ñnerisi',
        'description': '${lowStockProducts.length} √ºr√ºn√ºn stok seviyesi d√º≈ü√ºk',
        'recommendation': 'Bu √ºr√ºnlerin stok seviyesini artƒ±rƒ±n.',
      });
    }

    if (lowSalesProducts.isNotEmpty) {
      recommendations.add({
        'type': 'warning',
        'title': 'Satƒ±≈ü √ñnerisi',
        'description': '${lowSalesProducts.length} √ºr√ºn√ºn satƒ±≈ü performansƒ± d√º≈ü√ºk',
        'recommendation': 'Bu √ºr√ºnleri indirimle satmayƒ± veya katalogdan √ßƒ±karmayƒ± d√º≈ü√ºn√ºn.',
      });
    }

    recommendations.add({
      'type': 'profit',
      'title': 'Gelecek Hafta √ñnerileri',
      'description': 'Mevcut performansƒ±nƒ±zla devam ederseniz %10 kar artƒ±≈üƒ± bekleniyor',
      'recommendation': 'M√º≈üteri hizmetlerini geli≈ütirin ve yeni √ºr√ºnler ekleyin.',
    });

    return recommendations;
  }

  static List<Map<String, dynamic>> _getWeeklySummary() {
    final weeklyStats = _businessData['weeklyStats'];
    final products = _businessData['products'] as List<dynamic>;

    return [
      {
        'type': 'sales',
        'title': 'Haftalƒ±k √ñzet',
        'description': '${weeklyStats['totalSales']} √ºr√ºn satƒ±ldƒ±, ‚Ç∫${weeklyStats['totalRevenue'].toStringAsFixed(0)} gelir elde edildi',
        'recommendation': 'Performansƒ±nƒ±z iyi, hedeflerinizi koruyun.',
      },
      {
        'type': 'reviews',
        'title': 'M√º≈üteri Memnuniyeti',
        'description': 'Ortalama puan: ${weeklyStats['averageRating']}/5.0',
        'recommendation': 'M√º≈üteri memnuniyetiniz y√ºksek, bu durumu koruyun.',
      },
    ];
  }

  static bool _containsAny(String input, List<String> keywords) {
    return keywords.any((keyword) => input.contains(keyword));
  }

  // Get product performance data
  static List<Map<String, dynamic>> getProductPerformance() {
    final products = _businessData['products'] as List<dynamic>;
    return products.map((product) => {
      'name': product['name'],
      'sales': product['weeklySales'],
      'profit': product['profit'],
      'stock': product['stock'],
      'rating': product['rating'],
    }).toList();
  }

  // Get weekly trends
  static Map<String, dynamic> getWeeklyTrends() {
    return {
      'salesGrowth': 15.2,
      'profitGrowth': 12.8,
      'customerGrowth': 8.5,
      'topCategory': 'Teknoloji',
      'trendingProduct': 'Samsung Galaxy S24',
    };
  }

  // Get business insights
  static List<String> getBusinessInsights() {
    return [
      'Samsung Galaxy S24 en √ßok satan √ºr√ºn√ºn√ºz',
      'Stok seviyeleriniz genel olarak iyi',
      'M√º≈üteri memnuniyetiniz %92',
      'Haftalƒ±k kar marjƒ±nƒ±z %100',
      'Gelecek hafta %10 kar artƒ±≈üƒ± bekleniyor',
    ];
  }
} 